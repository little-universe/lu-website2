{"ast":null,"code":"import _objectSpread from \"/Users/adbhm/workspace/animation-prototype/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/adbhm/workspace/animation-prototype/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { tween, easing } from 'popmotion';\nimport { camelCase } from 'lodash';\n\nfunction getStyles(node, properties) {\n  var computed = window.getComputedStyle(node);\n  var styles = {};\n  properties.forEach(function (property) {\n    styles[camelCase(property)] = computed.getPropertyValue(property);\n  });\n  return styles;\n}\n\nvar nodes = {};\nexport function orbit(name, properties) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      styleState = _useState2[0],\n      setStyleState = _useState2[1];\n\n  var ref = useRef(null);\n  useLayoutEffect(function () {\n    var old = nodes[name];\n    delete nodes[name];\n    var newNode = ref.current;\n\n    if (old && newNode) {\n      // we've got a new node and old styles! So it's time to animate!\n      var newStyles = getStyles(newNode, properties);\n      var newPosition = newNode.getBoundingClientRect();\n      console.log(newPosition);\n      var translateX = old.position.left - newPosition.left;\n      var translateY = old.position.top - newPosition.top;\n\n      var oldStyles = _objectSpread({}, old.styles, {\n        transform: \"translate(\".concat(translateX, \"px, \").concat(translateY, \"px)\")\n      });\n\n      console.log(\"translate(\".concat(translateX, \"px, \").concat(translateY, \"px)\"));\n      setStyleState(oldStyles);\n      tween({\n        from: oldStyles,\n        to: _objectSpread({}, newStyles, {\n          transform: \"translate(0px, 0px)\"\n        }),\n        ease: easing.easeInOut,\n        duration: 3000\n      }).start(function (v) {\n        return setStyleState(_objectSpread({}, v));\n      });\n    }\n\n    return function () {\n      nodes[name] = {\n        styles: getStyles(ref.current, properties),\n        position: ref.current.getBoundingClientRect()\n      };\n    };\n  }, []);\n  return {\n    ref: ref,\n    style: styleState\n  };\n}","map":{"version":3,"sources":["/Users/adbhm/workspace/animation-prototype/src/orbit.js"],"names":["useEffect","useLayoutEffect","useRef","useState","tween","easing","camelCase","getStyles","node","properties","computed","window","getComputedStyle","styles","forEach","property","getPropertyValue","nodes","orbit","name","styleState","setStyleState","ref","old","newNode","current","newStyles","newPosition","getBoundingClientRect","console","log","translateX","position","left","translateY","top","oldStyles","transform","from","to","ease","easeInOut","duration","start","v","style"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,eAApB,EAAqCC,MAArC,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,WAA9B;AACA,SAASC,SAAT,QAA0B,QAA1B;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,UAAzB,EAAqC;AACnC,MAAIC,QAAQ,GAAGC,MAAM,CAACC,gBAAP,CAAwBJ,IAAxB,CAAf;AACA,MAAIK,MAAM,GAAG,EAAb;AACAJ,EAAAA,UAAU,CAACK,OAAX,CAAmB,UAACC,QAAD,EAAc;AAC/BF,IAAAA,MAAM,CAACP,SAAS,CAACS,QAAD,CAAV,CAAN,GAA8BL,QAAQ,CAACM,gBAAT,CAA0BD,QAA1B,CAA9B;AACD,GAFD;AAGA,SAAOF,MAAP;AACD;;AAED,IAAII,KAAK,GAAG,EAAZ;AAEA,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAqBV,UAArB,EAAiC;AAAA,kBACFN,QAAQ,CAAC,EAAD,CADN;AAAA;AAAA,MAChCiB,UADgC;AAAA,MACpBC,aADoB;;AAEtC,MAAIC,GAAG,GAAGpB,MAAM,CAAC,IAAD,CAAhB;AAEAD,EAAAA,eAAe,CAAC,YAAM;AACpB,QAAIsB,GAAG,GAAGN,KAAK,CAACE,IAAD,CAAf;AACA,WAAOF,KAAK,CAACE,IAAD,CAAZ;AAEA,QAAIK,OAAO,GAAGF,GAAG,CAACG,OAAlB;;AAEA,QAAGF,GAAG,IAAIC,OAAV,EAAmB;AAAE;AACnB,UAAIE,SAAS,GAAGnB,SAAS,CAACiB,OAAD,EAAUf,UAAV,CAAzB;AACA,UAAIkB,WAAW,GAAGH,OAAO,CAACI,qBAAR,EAAlB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AAEA,UAAII,UAAU,GAAGR,GAAG,CAACS,QAAJ,CAAaC,IAAb,GAAoBN,WAAW,CAACM,IAAjD;AACA,UAAIC,UAAU,GAAGX,GAAG,CAACS,QAAJ,CAAaG,GAAb,GAAmBR,WAAW,CAACQ,GAAhD;;AAEA,UAAIC,SAAS,qBACRb,GAAG,CAACV,MADI;AAEXwB,QAAAA,SAAS,sBAAeN,UAAf,iBAAgCG,UAAhC;AAFE,QAAb;;AAKAL,MAAAA,OAAO,CAACC,GAAR,qBAAyBC,UAAzB,iBAA0CG,UAA1C;AAEAb,MAAAA,aAAa,CAACe,SAAD,CAAb;AAEAhC,MAAAA,KAAK,CAAC;AACJkC,QAAAA,IAAI,EAAEF,SADF;AAEJG,QAAAA,EAAE,oBACGb,SADH;AAEAW,UAAAA,SAAS;AAFT,UAFE;AAMJG,QAAAA,IAAI,EAAEnC,MAAM,CAACoC,SANT;AAOJC,QAAAA,QAAQ,EAAE;AAPN,OAAD,CAAL,CAQGC,KARH,CAQS,UAACC,CAAD;AAAA,eAAOvB,aAAa,mBAAMuB,CAAN,EAApB;AAAA,OART;AASD;;AACD,WAAO,YAAM;AACX3B,MAAAA,KAAK,CAACE,IAAD,CAAL,GAAc;AACZN,QAAAA,MAAM,EAAEN,SAAS,CAACe,GAAG,CAACG,OAAL,EAAchB,UAAd,CADL;AAEZuB,QAAAA,QAAQ,EAAEV,GAAG,CAACG,OAAJ,CAAYG,qBAAZ;AAFE,OAAd;AAID,KALD;AAMD,GAxCc,EAwCZ,EAxCY,CAAf;AA0CA,SAAO;AACLN,IAAAA,GAAG,EAAHA,GADK;AAELuB,IAAAA,KAAK,EAAEzB;AAFF,GAAP;AAID","sourcesContent":["import { useEffect, useLayoutEffect, useRef, useState } from 'react'\nimport { tween, easing } from 'popmotion'\nimport { camelCase } from 'lodash'\n\nfunction getStyles(node, properties) {\n  let computed = window.getComputedStyle(node)\n  let styles = {}\n  properties.forEach((property) => {\n    styles[camelCase(property)] = computed.getPropertyValue(property)\n  })\n  return styles\n}\n\nlet nodes = {}\n\nexport function orbit(name, properties) {\n  let [ styleState, setStyleState ] = useState({})\n  let ref = useRef(null)\n\n  useLayoutEffect(() => {\n    let old = nodes[name]\n    delete nodes[name]\n\n    let newNode = ref.current\n\n    if(old && newNode) { // we've got a new node and old styles! So it's time to animate!\n      let newStyles = getStyles(newNode, properties)\n      let newPosition = newNode.getBoundingClientRect()\n\n      console.log(newPosition)\n\n      let translateX = old.position.left - newPosition.left\n      let translateY = old.position.top - newPosition.top\n\n      let oldStyles = {\n        ...old.styles,\n        transform: `translate(${translateX}px, ${translateY}px)`\n      }\n\n      console.log(`translate(${translateX}px, ${translateY}px)`)\n\n      setStyleState(oldStyles)\n\n      tween({\n        from: oldStyles,\n        to: {\n          ...newStyles,\n          transform: `translate(0px, 0px)`\n        },\n        ease: easing.easeInOut,\n        duration: 3000\n      }).start((v) => setStyleState({ ...v }))\n    }\n    return () => {\n      nodes[name] = {\n        styles: getStyles(ref.current, properties),\n        position: ref.current.getBoundingClientRect()\n      }\n    }\n  }, [])\n\n  return {\n    ref,\n    style: styleState\n  }\n}\n"]},"metadata":{},"sourceType":"module"}